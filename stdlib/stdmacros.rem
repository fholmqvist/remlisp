;;; REMLISP STANDARD LIBRARY v0.1.0
;;;
;;; MIT License
;;;
;;; Copyright (c) 2024 Fredrik Holmqvist
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in all
;;; copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;; SOFTWARE.

;; ============================================================================
;; IO
;; ============================================================================

;; ============================================================================
;; TYPES
;; ============================================================================

;; ============================================================================
;; VECTORS
;; ============================================================================

;; ============================================================================
;; STRINGS
;; ============================================================================

;; ============================================================================
;; NUMBERS
;; ============================================================================

(macro inc [x]
  `(set ,x (+ ,x 1)))

;; ============================================================================
;; BOOLEANS
;; ============================================================================

;; ============================================================================
;; RANDOM
;; ============================================================================

;; ============================================================================
;; ITERATION
;; ============================================================================

(macro for [[index start end next] body]
  `(do (var ,index ,start)
       (while (!= ,index ,end)
         (do ,body
             (,next ,index)))))

;; TODO: Fix gensym during macro expansion.
(macro each [[x xs] body]
  `(do (var _each ,xs)
       (for [i 0 (length _each) inc]
          (do (var ,x (get _each i))
              ,body))))

;; ============================================================================
;; VARIOUS
;; ============================================================================

(macro setf [get f]
  `(do (var fff ,f)
       (set ,get (fff ,get))))
